@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2021 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Riot/"
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Pages.General
@inject AppData _appData
@inject IJSRuntime _jsRuntime
@{ _appData.SetActiveIJsRuntime(_jsRuntime); }
@inject NavigationManager _navManager
@{ _appData.SetActiveNavMan(_navManager); }

@inject AppSettings _appSettings
<style>@(new AppSettings().GetCssBlock())</style>
@inject ILanguageContainerService _locale
@inject Data.Settings.Riot _riot


<ContextMenu ContextMenuString="@_riot.ContextMenuJson" />
<div id="acc_list" class="acc_list">
    <toastarea class="toastarea" />
</div>
<div class="acc_list_actionbar">
    <div class="statusBar"><div></div><input id="CurrentStatus" @bind="@_appData.CurrentStatus" spellcheck="false" disabled></div>
    <div>
        @if (GetLeague())
        {
            <button id="btnLeague" @onclick="() => RiotSwitcherFuncs.RiotStart('l')">
                <svg viewBox="0 0 2084 2084" draggable="false" alt="League" class="riotIcoLeague">
                    <use href="img/icons/ico_League.svg#icoLeague"></use>
                </svg>
            </button>
        }

        @if (GetRuneterra())
        {
            <button id="btnRuneterra" @onclick="() => RiotSwitcherFuncs.RiotStart('r')">
                <svg viewBox="0 0 2084 2084" draggable="false" alt="Runeterra" class="riotIcoRuneterra">
                    <use href="img/icons/ico_Runeterra.svg#icoRuneterra"></use>
                </svg>
            </button>
        }

        @if (GetValorant())
        {
            <button id="btnValorant" @onclick="() => RiotSwitcherFuncs.RiotStart('v')">
                <svg viewBox="0 0 2084 2084" draggable="false" alt="Valorant" class="riotIcoValorant">
                    <use href="img/icons/ico_Valorant.svg#icoValorant"></use>
                </svg>
            </button>
        }

        <button id="btnAddNew" onclick="newLogin()">
	        <svg viewBox="0 0 448 512" draggable="false" alt="+" class="footerIcoInline">
		        <use href="img/fontawesome/plus.svg#img"></use>
	        </svg>
	        <span>@_locale["Button_AddNew"]</span>
        </button>
		<button id="btnAddCurrent" onclick="showModal('accString');">
			<svg viewBox="0 0 448 512" draggable="false" alt="v" class="footerIcoInline">
				<use href="img/fontawesome/save.svg#img"></use>
			</svg>
			<span>@_locale["Button_SaveCurrent"]</span>
		</button>
		<button class="btn_login" id="btnLogin" onclick="swapTo(-1, event)">
			<span>@_locale["Button_Login"]</span>
			<svg viewBox="0 0 192 512" draggable="false" alt="v" class="footerIcoInline">
		        <use href="img/fontawesome/caret-right.svg#img"></use>
	        </svg>
		</button>

        <button id="btnSettings" onclick="location = 'Riot/Settings'">
            <svg viewBox="0 0 60 60" draggable="false" alt="Settings" class="footerIcoSettings">
                <use href="img/icons/ico_settings.svg#icoSettings"></use>
            </svg>
        </button>

        <button id="btnHelp" onclick="showModal('info');">
            <svg viewBox="0 0 60 60" draggable="false" alt="Question" class="footerIcoQuestion">
                <use href="img/icons/ico_question.svg#icoQuestion"></use>
            </svg>
        </button>
    </div>

</div>


@code
{
    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override void OnParametersSet()
    {
        _appSettings.StreamerModeCheck();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await GeneralFuncs.HandleFirstRender(firstRender, "Riot Games");

    /// <summary>
    /// Check if League of Legends exists on disk, return true if it does.
    /// </summary>
    private static bool GetLeague()
    {
        RiotSwitcherFuncs.LoadImportantData();
        return Data.Settings.Riot.Instance.LeagueDir != null;
    }

    /// <summary>
    /// Check if Legends of Runeterra exists on disk, return true if it does.
    /// </summary>
    private static bool GetRuneterra()
    {
        RiotSwitcherFuncs.LoadImportantData();
        return Data.Settings.Riot.Instance.RuneterraDir != null;
    }

    /// <summary>
    /// Check if Valorant exists on disk, return true if it does.
    /// </summary>
    private static bool GetValorant()
    {
        RiotSwitcherFuncs.LoadImportantData();
        return Data.Settings.Riot.Instance.ValorantDir != null;
    }
}
